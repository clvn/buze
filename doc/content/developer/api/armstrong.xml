<zidl>
  <namespace>
    <dlname>armstrong</dlname>
    <enum>
      <enumvalue>
        <name>
          zzub_version
        </name>
        <value>
          15
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_buffer_size
        </name>
        <value>
          256
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_event_type_t</name>
      <description>Event data structure sent to callbacks registered with add_callback on the Player object.</description>
      <enumvalue>
        <name>
          zzub_event_type_double_click
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_song
        </name>
        <value>
          60
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_plugin
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_before_delete_plugin
        </name>
        <value>
          5
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_plugin
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_plugin
        </name>
        <value>
          30
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_connection
        </name>
        <value>
          4
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_connection
        </name>
        <value>
          3
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_connection
        </name>
        <value>
          68
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_pluginparameter
        </name>
        <value>
          7
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_pattern
        </name>
        <value>
          25
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_pattern
        </name>
        <value>
          31
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_pattern
        </name>
        <value>
          26
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_patternevent
        </name>
        <value>
          27
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_patternevent
        </name>
        <value>
          48
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_patternevent
        </name>
        <value>
          49
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_orderlist
        </name>
        <value>
          32
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_orderlist
        </name>
        <value>
          33
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_orderlist
        </name>
        <value>
          41
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_patternformat
        </name>
        <value>
          52
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_patternformat
        </name>
        <value>
          61
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_patternformat
        </name>
        <value>
          53
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_patternformatcolumn
        </name>
        <value>
          54
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_patternformatcolumn
        </name>
        <value>
          62
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_patternformatcolumn
        </name>
        <value>
          55
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_patternformattrack
        </name>
        <value>
          63
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_patternformattrack
        </name>
        <value>
          64
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_patternformattrack
        </name>
        <value>
          65
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_plugin_group
        </name>
        <value>
          71
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_plugin_group
        </name>
        <value>
          72
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_plugin_group
        </name>
        <value>
          73
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_envelope_changed
        </name>
        <value>
          37
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_slices_changed
        </name>
        <value>
          38
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_wave
        </name>
        <value>
          56
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_wave
        </name>
        <value>
          39
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_wave
        </name>
        <value>
          40
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_insert_wavelevel
        </name>
        <value>
          12
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_wavelevel
        </name>
        <value>
          57
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_delete_wavelevel
        </name>
        <value>
          58
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_update_wavelevel_samples
        </name>
        <value>
          59
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_user_alert
        </name>
        <value>
          8
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_midi_control
        </name>
        <value>
          11
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_player_state_changed
        </name>
        <value>
          20
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_osc_message
        </name>
        <value>
          21
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_vu
        </name>
        <value>
          22
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_player_order_changed
        </name>
        <value>
          69
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_player_order_queue_changed
        </name>
        <value>
          70
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_custom
        </name>
        <value>
          44
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_samplerate_changed
        </name>
        <value>
          50
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_latency_changed
        </name>
        <value>
          76
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_device_reset
        </name>
        <value>
          77
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_barrier
        </name>
        <value>
          51
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_player_save
        </name>
        <value>
          74
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_player_load
        </name>
        <value>
          75
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_event_type_all
        </name>
        <value>
          255
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_player_state_t</name>
      <enumvalue>
        <name>
          zzub_player_state_playing
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_player_state_stopped
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_player_state_muted
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_player_state_released
        </name>
        <value>
          3
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_alert_type_t</name>
      <enumvalue>
        <name>
          zzub_alert_type_EnumeratingPlugins
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_alert_type_EnumeratingPluginsDone
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_alert_type_MixdownProgress
        </name>
        <value>
          20
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_alert_type_LoadingPlugins
        </name>
        <value>
          100
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_alert_type_LoadingPatterns
        </name>
        <value>
          101
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_alert_type_LoadingWaves
        </name>
        <value>
          102
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_alert_type_PatternRecursion
        </name>
        <value>
          400
        </value>
      </enumvalue>
    </enum>
    <class>
      <name>zzub_event_data_t</name>
      <class>
        <name>zzub_event_data_double_click_t</name>
      </class>
      <class>
        <name>zzub_event_data_insert_plugin_t</name>
      </class>
      <class>
        <name>zzub_event_data_delete_plugin_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_plugin_t</name>
      </class>
      <class>
        <name>zzub_event_data_insert_connection_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_connection_t</name>
      </class>
      <class>
        <name>zzub_event_data_delete_connection_t</name>
      </class>
      <class>
        <name>zzub_event_data_insert_pattern_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_pattern_t</name>
      </class>
      <class>
        <name>zzub_event_data_delete_pattern_t</name>
      </class>
      <class>
        <name>zzub_event_data_insert_pattern_event_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_pattern_event_t</name>
      </class>
      <class>
        <name>zzub_event_data_delete_pattern_event_t</name>
      </class>
      <class>
        <name>zzub_event_data_insert_pattern_format_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_pattern_format_t</name>
      </class>
      <class>
        <name>zzub_event_data_delete_pattern_format_t</name>
      </class>
      <class>
        <name>zzub_event_data_insert_pattern_format_column_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_pattern_format_column_t</name>
      </class>
      <class>
        <name>zzub_event_data_delete_pattern_format_column_t</name>
      </class>
      <class>
        <name>zzub_event_data_midi_message_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_plugin_parameter_t</name>
      </class>
      <class>
        <name>zzub_event_data_player_state_changed_t</name>
      </class>
      <class>
        <name>zzub_event_data_player_order_changed_t</name>
      </class>
      <class>
        <name>zzub_event_data_player_load_t</name>
      </class>
      <class>
        <name>zzub_event_data_player_save_t</name>
      </class>
      <class>
        <name>zzub_event_data_vu_t</name>
      </class>
      <class>
        <name>zzub_event_data_serialize_t</name>
      </class>
      <class>
        <name>zzub_event_data_unknown_t</name>
      </class>
      <class>
        <name>zzub_event_data_osc_message_t</name>
      </class>
      <class>
        <name>zzub_event_data_insert_wave_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_wave_t</name>
      </class>
      <class>
        <name>zzub_event_data_delete_wave_t</name>
      </class>
      <class>
        <name>zzub_event_data_insert_wavelevel_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_wavelevel_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_wavelevel_samples_t</name>
      </class>
      <class>
        <name>zzub_event_data_delete_wavelevel_t</name>
      </class>
      <class>
        <name>zzub_event_data_insert_plugin_group_t</name>
      </class>
      <class>
        <name>zzub_event_data_delete_plugin_group_t</name>
      </class>
      <class>
        <name>zzub_event_data_update_plugin_group_t</name>
      </class>
      <class>
        <name>zzub_event_data_custom_t</name>
      </class>
      <class>
        <name>zzub_event_data_user_alert_t</name>
      </class>
    </class>
    <enum>
      <name>zzub_parameter_type_t</name>
      <enumvalue>
        <name>
          zzub_parameter_type_note
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_type_switch
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_type_byte
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_type_word
        </name>
        <value>
          3
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_type_meta
        </name>
        <value>
          4
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_wave_buffer_type_t</name>
      <enumvalue>
        <name>
          zzub_wave_buffer_type_si16
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_wave_buffer_type_f32
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_wave_buffer_type_si32
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_wave_buffer_type_si24
        </name>
        <value>
          3
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_oscillator_type_t</name>
      <enumvalue>
        <name>
          zzub_oscillator_type_sine
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_oscillator_type_sawtooth
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_oscillator_type_pulse
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_oscillator_type_triangle
        </name>
        <value>
          3
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_oscillator_type_noise
        </name>
        <value>
          4
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_oscillator_type_sawtooth_303
        </name>
        <value>
          5
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_note_value_t</name>
      <enumvalue>
        <name>
          zzub_note_value_none
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_note_value_off
        </name>
        <value>
          255
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_note_value_cut
        </name>
        <value>
          254
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_note_value_min
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_note_value_max
        </name>
        <value>
          156
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_note_value_c4
        </name>
        <value>
          65
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_switch_value_t</name>
      <enumvalue>
        <name>
          zzub_switch_value_none
        </name>
        <value>
          255
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_switch_value_off
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_switch_value_on
        </name>
        <value>
          1
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_wavetable_index_value_t</name>
      <enumvalue>
        <name>
          zzub_wavetable_index_value_none
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_wavetable_index_value_min
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_wavetable_index_value_max
        </name>
        <value>
          200
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_parameter_flag_t</name>
      <enumvalue>
        <name>
          zzub_parameter_flag_wavetable_index
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_state
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_event_on_edit
        </name>
        <value>
          4
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_pattern_index
        </name>
        <value>
          8
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_velocity_index
        </name>
        <value>
          16
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_delay_index
        </name>
        <value>
          32
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_compound
        </name>
        <value>
          64
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_char_index
        </name>
        <value>
          128
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_harmony_index
        </name>
        <value>
          256
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_meta_note
        </name>
        <value>
          512
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_flag_meta_wave
        </name>
        <value>
          1024
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_plugin_flag_t</name>
      <description>Plugin flags</description>
      <enumvalue>
        <name>
          zzub_plugin_flag_plays_waves
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_uses_lib_interface
        </name>
        <value>
          4
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_does_input_mixing
        </name>
        <value>
          16
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_is_singleton
        </name>
        <value>
          32768
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_is_root
        </name>
        <value>
          65536
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_has_audio_input
        </name>
        <value>
          131072
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_has_audio_output
        </name>
        <value>
          262144
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_is_offline
        </name>
        <value>
          524288
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_has_event_output
        </name>
        <value>
          1048576
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_stream
        </name>
        <value>
          4194304
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_has_midi_input
        </name>
        <value>
          8388608
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_has_midi_output
        </name>
        <value>
          16777216
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_has_group_input
        </name>
        <value>
          33554432
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_has_group_output
        </name>
        <value>
          67108864
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_is_sequence
        </name>
        <value>
          134217728
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_is_connection
        </name>
        <value>
          268435456
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_is_interval
        </name>
        <value>
          536870912
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_is_encoder
        </name>
        <value>
          1073741824
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_plugin_flag_has_note_output
        </name>
        <value>
          -2147483648
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_wave_flag_t</name>
      <enumvalue>
        <name>
          zzub_wave_flag_loop
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_wave_flag_extended
        </name>
        <value>
          4
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_wave_flag_stereo
        </name>
        <value>
          8
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_wave_flag_pingpong
        </name>
        <value>
          16
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_wave_flag_envelope
        </name>
        <value>
          128
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_envelope_flag_t</name>
      <enumvalue>
        <name>
          zzub_envelope_flag_sustain
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_envelope_flag_loop
        </name>
        <value>
          2
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_process_mode_t</name>
      <enumvalue>
        <name>
          zzub_process_mode_no_io
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_process_mode_read
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_process_mode_write
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_process_mode_read_write
        </name>
        <value>
          3
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_encoder_state_t</name>
      <enumvalue>
        <name>
          zzub_encoder_state_playing
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_encoder_state_stopped
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_encoder_state_deleted
        </name>
        <value>
          4
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_encoder_state_seeking
        </name>
        <value>
          8
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_encoder_state_created
        </name>
        <value>
          16
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_connection_type_t</name>
      <enumvalue>
        <name>
          zzub_connection_type_audio
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_connection_type_event
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_connection_type_midi
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_connection_type_note
        </name>
        <value>
          3
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_parameter_group_t</name>
      <enumvalue>
        <name>
          zzub_parameter_group_internal
        </name>
        <value>
          0
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_group_global
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_group_track
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_group_controller
        </name>
        <value>
          3
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_parameter_group_virtual
        </name>
        <value>
          4
        </value>
      </enumvalue>
    </enum>
    <enum>
      <name>zzub_validation_error_type_t</name>
      <enumvalue>
        <name>
          zzub_validation_error_type_parameter_count_mismatch
        </name>
        <value>
          1
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_parameter_type_mismatch
        </name>
        <value>
          2
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_parameter_flags_mismatch
        </name>
        <value>
          3
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_parameter_value_min_mismatch
        </name>
        <value>
          4
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_parameter_value_max_mismatch
        </name>
        <value>
          5
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_parameter_value_none_mismatch
        </name>
        <value>
          6
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_parameter_value_default_mismatch
        </name>
        <value>
          7
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_plugin_not_found_using_dummy
        </name>
        <value>
          8
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_plugin_validation_failed_using_dummy
        </name>
        <value>
          9
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_plugin_not_found
        </name>
        <value>
          10
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_plugin_inputs_mismatch
        </name>
        <value>
          11
        </value>
      </enumvalue>
      <enumvalue>
        <name>
          zzub_validation_error_type_plugin_outputs_mismatch
        </name>
        <value>
          12
        </value>
      </enumvalue>
    </enum>
    <class>
      <name>zzub_device_info_t</name>
      <description>Description of an audio device.</description>
      <description>The engine sends a device_reset-event when the DeviceInfo objects become invalid and must be re-enumerated.</description>
      <method>
        <name>zzub_device_info_get_api</name>
        <description>Returns an identifier of the device API (ASIO, DS, etc)</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_t*</type>
            <name>device_info</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_device_info_get_name</name>
        <description>Returns the name of the audio device</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_t*</type>
            <name>device_info</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_device_info_get_supported_buffersizes</name>
        <description>Returns an array of supported buffersizes.</description>
        <description>This returns nothing for input devices, which always use the same buffer size as the output device.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_t*</type>
            <name>device_info</name>
          </argument>
          <argument>
            <type>int*</type>
            <name>result</name>
          </argument>
          <argument>
            <type>int</type>
            <name>maxsizes</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_device_info_get_supported_samplerates</name>
        <description>Returns an array of supported sample rates.</description>
        <description>This returns nothing for input devices, which always use the same samplerate as the output device.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_t*</type>
            <name>device_info</name>
          </argument>
          <argument>
            <type>int*</type>
            <name>result</name>
          </argument>
          <argument>
            <type>int</type>
            <name>maxrates</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_device_info_get_supported_output_channels</name>
        <description>Returns the number of supported output channels as reported by the driver.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_t*</type>
            <name>device_info</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_device_info_get_supported_input_channels</name>
        <description>Returns the number of supported input channels as reported by the driver.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_t*</type>
            <name>device_info</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_device_info_iterator_t</name>
      <description>Iterator for audio device infos.</description>
      <method>
        <name>zzub_device_info_iterator_next</name>
        <description>Iterates to the next item.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_iterator_t*</type>
            <name>device_info_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_device_info_iterator_valid</name>
        <description>Returns true if the iterator is valid and it is safe to call current()</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_iterator_t*</type>
            <name>device_info_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_device_info_iterator_current</name>
        <description>Returns the current item.</description>
        <returns>zzub_device_info_t*</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_iterator_t*</type>
            <name>device_info_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_device_info_iterator_reset</name>
        <description>Resets the iterator to the start.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_iterator_t*</type>
            <name>device_info_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_device_info_iterator_destroy</name>
        <description>Destroys the iterator.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_device_info_iterator_t*</type>
            <name>device_info_iterator</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_audiodriver_t</name>
      <description>Methods for enumerating, configuring and creating an audio driver instance.</description>
      <description>Implements both the RtAudio and PortAudio APIs.</description>
      <method>
        <name>zzub_audiodriver_create_silent</name>
        <description>Create a silent, non-processing audio driver that has one device with the specified properties.</description>
        <description>This driver has no audio thread. Samples must be generated manually by calling the work_stereo method on the Player object.</description>
        <returns>zzub_audiodriver_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
          <argument>
            <type>int</type>
            <name>out_channels</name>
          </argument>
          <argument>
            <type>int</type>
            <name>in_channels</name>
          </argument>
          <argument>
            <type>int*</type>
            <name>supported_rates</name>
          </argument>
          <argument>
            <type>int</type>
            <name>num_rates</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_create</name>
        <description>Creates an audio driver for enumerating audio devices provided by the operating system.</description>
        <returns>zzub_audiodriver_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_count</name>
        <description>Get number of detected input and output audio devices.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_device_info</name>
        <description>Returns info for the device at the specified index.</description>
        <description>The engine sends a device_reset-event when the DeviceInfo objects become invalid and must be re-enumerated.</description>
        <returns>zzub_device_info_t*</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_device_info_by_name</name>
        <description>Returns info for the device at the specified index.</description>
        <description>The engine sends a device_reset-event when the DeviceInfo objects become invalid and must be re-enumerated.</description>
        <returns>zzub_device_info_t*</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_output_iterator</name>
        <description>Returns an iterator for all output devices.</description>
        <description>The engine sends a device_reset-event when the DeviceInfo objects become invalid and must be re-enumerated.</description>
        <returns>zzub_device_info_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_input_iterator</name>
        <description>Returns an iterator for all input devices.</description>
        <description>The engine sends a device_reset-event when the DeviceInfo objects become invalid and must be re-enumerated.</description>
        <returns>zzub_device_info_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_input_iterator_for_output</name>
        <description>Returns an iterator with devices suitable as input for the specified output device.</description>
        <description>The engine sends a device_reset-event when the DeviceInfo objects become invalid and must be re-enumerated.</description>
        <returns>zzub_device_info_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
          <argument>
            <type>zzub_device_info_t*</type>
            <name>info</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_create_device</name>
        <description>Create specified audio device. Audio device is disabled by default.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>input_name</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>output_name</name>
          </argument>
          <argument>
            <type>int</type>
            <name>buffersize</name>
          </argument>
          <argument>
            <type>int</type>
            <name>samplerate</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_current_device</name>
        <description>Returns a DeviceInfo object for the current device. Returns NULL if no device was created.</description>
        <description>The engine sends a device_reset-event when the DeviceInfo objects become invalid and must be re-enumerated.</description>
        <returns>zzub_device_info_t*</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
          <argument>
            <type>int</type>
            <name>for_input</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_enable</name>
        <description>Enable or disable current audio driver.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
          <argument>
            <type>int</type>
            <name>state</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_enabled</name>
        <description>Returns whether current audio driver is enabled or disabled.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_destroy</name>
        <description>Disassociate audio driver and player.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_destroy_device</name>
        <description>De-allocate the current device.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_samplerate</name>
        <description>Configuration: Retreive audio driver sample rate.</description>
        <returns>unsigned int</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_buffersize</name>
        <description>Configuration: Retreive audio driver buffer size/latency.</description>
        <returns>unsigned int</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_cpu_load</name>
        <description>Returns CPU load of the audio drivers callback.</description>
        <returns>double</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_get_master_channel</name>
        <description>Configuration: The audio device channel on which the Master plugin sends it output. Usually 0, but can be greater for audio devices that support more than two output channels.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_set_master_channel</name>
        <description>Configuration: The audio device channel on which the Master plugin sends it output. Usually 0, but can be greater for audio devices that support more than two output channels.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_audiodriver_configure</name>
        <description>Open the configuration user interface for the active driver.</description>
        <description>Does nothing if the driver does not implement a user interface.</description>
        <description>When the user presses OK, the driver might request a device reset with the new settings and issue a samplerate_changed-event.</description>
        <description>This is only used with ASIO devices and will do nothing on other devices.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_audiodriver_t*</type>
            <name>audiodriver</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_mididriver_t</name>
      <description>Methods for enumerating and opening MIDI input and output devices.</description>
      <method>
        <name>zzub_mididriver_get_count</name>
        <description>Returns the number of detected input and output MIDI devices.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_mididriver_get_name</name>
        <description>Returns the name of a MIDI device.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_mididriver_is_input</name>
        <description>Returns true if the device is an input device.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_mididriver_is_output</name>
        <description>Returns true if the device is an output device.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_mididriver_open</name>
        <description>Opens the MIDI device.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_mididriver_close_all</name>
        <description>Closes all MIDI devices.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_plugincollection_t</name>
      <description>For enumerating and configuring plugin collections.</description>
      <method>
        <name>zzub_plugincollection_get_by_uri</name>
        <returns>zzub_plugincollection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>uri</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugincollection_get_name</name>
        <description>Returns the name of the plugin collection. E.g 'VST' for the VST wrapper.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_plugincollection_t*</type>
            <name>plugincollection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugincollection_configure</name>
        <description>Passes a key/value-pair to the plugin collection. Used to set e.g VST scanning paths.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugincollection_t*</type>
            <name>plugincollection</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>key</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_input_t</name>
      <description>Methods for working with file- or memory-based input streams. E.g reading from a file or buffer.</description>
      <method>
        <name>zzub_input_open_file</name>
        <description>Create an input stream that reads from a file.</description>
        <returns>zzub_input_t*</returns>
        <arguments>
          <argument>
            <type>const char*</type>
            <name>filename</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_input_destroy</name>
        <description>Closes an input stream created with zzub_create_output_XXX.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_input_t*</type>
            <name>input</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_input_read</name>
        <description>Reads bytes from the stream.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_input_t*</type>
            <name>input</name>
          </argument>
          <argument>
            <type>char*</type>
            <name>buffer</name>
          </argument>
          <argument>
            <type>int</type>
            <name>bytes</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_input_size</name>
        <description>Returns the total number of bytes that can be read from the stream.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_input_t*</type>
            <name>input</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_input_position</name>
        <description>Returns the current read position in the stream.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_input_t*</type>
            <name>input</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_input_seek</name>
        <description>Seeks to a specified offset in the stream.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_input_t*</type>
            <name>input</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pos</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_output_t</name>
      <description>Methods for working with file- or memory-based output streams. E.g writing to a file or buffer.</description>
      <method>
        <name>zzub_output_create_file</name>
        <description>Create an output stream that writes to a file.</description>
        <returns>zzub_output_t*</returns>
        <arguments>
          <argument>
            <type>const char*</type>
            <name>filename</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_output_destroy</name>
        <description>Closes an output stream created with zzub_create_output_XXX.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_output_t*</type>
            <name>output</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_output_write</name>
        <description>Writes bytes to the stream.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_output_t*</type>
            <name>output</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>buffer</name>
          </argument>
          <argument>
            <type>int</type>
            <name>bytes</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_output_position</name>
        <description>Returns the current write position in the stream.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_output_t*</type>
            <name>output</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_output_seek</name>
        <description>Seeks to a specified offset in the stream.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_output_t*</type>
            <name>output</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pos</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_archive_t</name>
      <description>Methods for working with in-memory streams.</description>
      <method>
        <name>zzub_archive_create_memory</name>
        <description>Create an in-memory archive of keyed input and output streams.</description>
        <returns>zzub_archive_t*</returns>
        <arguments />
      </method>
      <method>
        <name>zzub_archive_get_output</name>
        <description>Returns an output stream object for writing.</description>
        <returns>zzub_output_t*</returns>
        <arguments>
          <argument>
            <type>zzub_archive_t*</type>
            <name>archive</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>path</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_archive_get_input</name>
        <description>Returns an input stream object for reading.</description>
        <returns>zzub_input_t*</returns>
        <arguments>
          <argument>
            <type>zzub_archive_t*</type>
            <name>archive</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>path</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_archive_destroy</name>
        <description>Destroys the archive and frees allocated resources.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_archive_t*</type>
            <name>archive</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_midimapping_t</name>
      <description>Represents a binding between a MIDI controller and a plugin parameter.</description>
      <description>To create a MIDI mapping, see zzub_player_add_midimapping().</description>
      <method>
        <name>zzub_midimapping_get_plugin</name>
        <description>Bound plugin.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_midimapping_t*</type>
            <name>midimapping</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_midimapping_get_group</name>
        <description>Bound plugin group.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_midimapping_t*</type>
            <name>midimapping</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_midimapping_get_track</name>
        <description>Bound plugin track.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_midimapping_t*</type>
            <name>midimapping</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_midimapping_get_column</name>
        <description>Bound plugin column.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_midimapping_t*</type>
            <name>midimapping</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_midimapping_get_channel</name>
        <description>Bound MIDI channel.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_midimapping_t*</type>
            <name>midimapping</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_midimapping_get_controller</name>
        <description>Bound MIDI controller.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_midimapping_t*</type>
            <name>midimapping</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_pattern_event_t</name>
      <description>Represents an event in a pattern.</description>
      <method>
        <name>zzub_pattern_event_get_id</name>
        <description>Event ID.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_get_pluginid</name>
        <description>Event plugin id.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_get_pattern</name>
        <description>Returns the pattern in which the event occurs.</description>
        <returns>zzub_pattern_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_get_group</name>
        <description>Event plugin group.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_get_track</name>
        <description>Event plugin track.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_get_column</name>
        <description>Event plugin column.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_get_time</name>
        <description>Event timestamp. The unit of the timestamp depends on the context in which the pattern is being played.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_get_value</name>
        <description>Returns the event value.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_get_meta</name>
        <description>Returns the events meta value. Used with notes.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_set_value</name>
        <description>Set a new value on this event.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_set_meta</name>
        <description>Set a new meta value on this event.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
          <argument>
            <type>int</type>
            <name>meta</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_set_time</name>
        <description>Set a new timestamp on this event.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>pattern_event</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_pattern_iterator_t</name>
      <description>Helper iterator for a range of patterns.</description>
      <method>
        <name>zzub_pattern_iterator_next</name>
        <description>Iterates to the next item.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_iterator_t*</type>
            <name>pattern_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_iterator_valid</name>
        <description>Returns true if the iterator is valid and it is safe to call current()</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_iterator_t*</type>
            <name>pattern_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_iterator_current</name>
        <description>Returns the current item.</description>
        <returns>zzub_pattern_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_iterator_t*</type>
            <name>pattern_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_iterator_destroy</name>
        <description>Destroys the iterator.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_iterator_t*</type>
            <name>pattern_iterator</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_pattern_event_iterator_t</name>
      <description>Helper iterator for a range of pattern events.</description>
      <method>
        <name>zzub_pattern_event_iterator_next</name>
        <description>Iterates to the next item.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_iterator_t*</type>
            <name>pattern_event_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_iterator_valid</name>
        <description>Returns true if the iterator is valid and it is safe to call current()</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_iterator_t*</type>
            <name>pattern_event_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_iterator_current</name>
        <description>Returns the current item.</description>
        <returns>zzub_pattern_event_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_iterator_t*</type>
            <name>pattern_event_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_event_iterator_destroy</name>
        <description>Destroys the iterator.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_event_iterator_t*</type>
            <name>pattern_event_iterator</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_pattern_t</name>
      <description>Methods for working with a pattern.</description>
      <description>The format of a pattern is completely dynamic, defined by a zzub_pattern_format.</description>
      <description>To create a new pattern, see zzub_player_create_pattern().</description>
      <method>
        <name>zzub_pattern_destroy</name>
        <description>Destroys the pattern and frees all resources.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_name</name>
        <description>Returns the pattern name.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_name</name>
        <description>Set the pattern name.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_row_count</name>
        <description>Returns length of pattern.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_row_count</name>
        <description>Sets length of pattern.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_id</name>
        <description>Pattern ID.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_format</name>
        <description>Returns the pattern format.</description>
        <returns>zzub_pattern_format_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_format</name>
        <description>Sets the pattern format.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>format</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_resolution</name>
        <description>Returns the pattern resolution - rows per tick.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_resolution</name>
        <description>Sets the pattern resolution.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>resolution</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_display_resolution</name>
        <description>Display resolution. Has no effect on the audio output.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_display_resolution</name>
        <description>Display resolution. Has no effect on the audio output.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>resolution</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_display_beat_rows</name>
        <description>Display beat coloring. Has no effect on the audio output.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>verydarkrow</name>
          </argument>
          <argument>
            <type>int</type>
            <name>darkrow</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_display_beat_rows</name>
        <description>Display beat coloring. Has no effect on the audio output.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>verydarkrow</name>
          </argument>
          <argument>
            <type>int</type>
            <name>darkrow</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_loop_start</name>
        <description>Returns where the pattern starts looping.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_loop_start</name>
        <description>Sets where the pattern starts looping.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pos</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_loop_end</name>
        <description>Returns where the pattern ends looping.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_loop_end</name>
        <description>Sets where the pattern ends looping.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pos</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_loop_enabled</name>
        <description>Returns whether pattern looping is enabled.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_loop_enabled</name>
        <description>Sets whether pattern looping is enabled.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>enable</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_replay_row</name>
        <description>Returns the position from where pattern replay starts.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_replay_row</name>
        <description>Sets the position from where pattern replay starts.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>row</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_currently_playing_row</name>
        <description>Retreive the currently playing row for a pattern.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_value</name>
        <description>Sets the value of a pattern event.</description>
        <description>This checks for the existence of an existing event at the specified timestamp, and updates the value if it exists. For a faster version, see zzub_pattern_insert_value().</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>row</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>meta</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_value</name>
        <description>Returns the value of a pattern event.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>row</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>meta</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_event_iterator</name>
        <description>Returns an iterator for iterating over pattern events. Pass NULL for the plugin parameter to retreive all events. -1 can be sent to group, track and column to return only a selected group/track/column.</description>
        <returns>zzub_pattern_event_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_get_event_unsorted_iterator</name>
        <description>Like get_event_iterator, but not sorted by time. Performs faster.</description>
        <returns>zzub_pattern_event_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_insert_value</name>
        <description>Inserts a value into the pattern without checking if an event already exists. This should only be used for new patterns: the behavior of multiple events at the same timestamp is undefined.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>time</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>meta</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_delete_value</name>
        <description>Deletes an event from the pattern.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>id</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_update_value</name>
        <description>Changes the time stamp and values of an event.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>id</name>
          </argument>
          <argument>
            <type>int</type>
            <name>time</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>meta</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_update_value_full</name>
        <description>Changes the parameter, time stamp and values of an event.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>id</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>time</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>meta</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_compact_pattern</name>
        <description>Transform: Compact pattern by a factor.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>factor</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_expand_pattern</name>
        <description>Transform: Expand pattern by a factor.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>factor</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_timeshift_events</name>
        <description>Transform: Shift events by time.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>timeshift</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_delete_events</name>
        <description>Transform: Delete events.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_move_scale_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>src_idx</name>
          </argument>
          <argument>
            <type>int</type>
            <name>src_time</name>
          </argument>
          <argument>
            <type>int</type>
            <name>dst_idx</name>
          </argument>
          <argument>
            <type>int</type>
            <name>dst_time</name>
          </argument>
          <argument>
            <type>int</type>
            <name>width</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
          <argument>
            <type>int</type>
            <name>makecopy</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_paste_stream_events</name>
        <description>Accepts a stream of pattern events and pastes them at a location in the pattern. All parameter ranges will be scaled.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromidx</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>charbuf</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_transpose_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>delta</name>
          </argument>
          <argument>
            <type>int*</type>
            <name>holes</name>
          </argument>
          <argument>
            <type>int</type>
            <name>holecount</name>
          </argument>
          <argument>
            <type>int*</type>
            <name>metas</name>
          </argument>
          <argument>
            <type>int</type>
            <name>metacount</name>
          </argument>
          <argument>
            <type>int</type>
            <name>chromatic</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_randomize_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>skip</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_randomize_range_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>from_val</name>
          </argument>
          <argument>
            <type>int</type>
            <name>to_val</name>
          </argument>
          <argument>
            <type>int</type>
            <name>skip</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_randomize_from_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>skip</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_humanize_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>deviation</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_shuffle_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_interpolate_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>skip</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_gradiate_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>skip</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_smooth_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>strength</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_reverse_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_compact_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>factor</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_expand_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>factor</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_thin_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>major</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_repeat_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>major</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_echo_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>major</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_unique_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_scale_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>double</type>
            <name>min1</name>
          </argument>
          <argument>
            <type>double</type>
            <name>max1</name>
          </argument>
          <argument>
            <type>double</type>
            <name>min2</name>
          </argument>
          <argument>
            <type>double</type>
            <name>max2</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_fade_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>double</type>
            <name>fromvalue</name>
          </argument>
          <argument>
            <type>double</type>
            <name>tovalue</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_curvemap_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_invert_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_rotate_rows_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>offset</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_rotate_vals_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>offset</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_rotate_dist_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>offset</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_set_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>meta</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_replace_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>from_value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>from_meta</name>
          </argument>
          <argument>
            <type>int</type>
            <name>to_value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>to_meta</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_remove_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>meta</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_notelength_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>desired_len</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
          <argument>
            <type>int</type>
            <name>off_value</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_volumes_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>note_column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>vol_column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_swap_track_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>left_idx</name>
          </argument>
          <argument>
            <type>int</type>
            <name>right_idx</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_swap_rows_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pluginid</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>top_row</name>
          </argument>
          <argument>
            <type>int</type>
            <name>bottom_row</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_invert_chord_events</name>
        <description>Transform.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>int</type>
            <name>left_idx</name>
          </argument>
          <argument>
            <type>int</type>
            <name>right_idx</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromtime</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
          <argument>
            <type>int</type>
            <name>direction</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_move_and_transpose_notes</name>
        <description>Edits notes independently of voice.</description>
        <description>mode 0 = move entire notes, mode 1 = move beginning of notes, mode 2 = move end of notes</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>const zzub_pattern_event_t**</type>
            <name>events</name>
          </argument>
          <argument>
            <type>int</type>
            <name>numevents</name>
          </argument>
          <argument>
            <type>int</type>
            <name>timeshift</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pitchshift</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_insert_note</name>
        <description>Inserts a voice-independent note.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>time</name>
          </argument>
          <argument>
            <type>int</type>
            <name>note</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_update_note</name>
        <description>Updates a voice-independent note.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>zzub_pattern_event_t*</type>
            <name>patternevent</name>
          </argument>
          <argument>
            <type>int</type>
            <name>time</name>
          </argument>
          <argument>
            <type>int</type>
            <name>note</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_pattern_format_t</name>
      <description>Container class for which columns to refer in a pattern.</description>
      <description>To create a new pattern format, see zzub_player_create_pattern_format().</description>
      <description>@SEEALSO: Pattern, PatternFormatIterator, PatternFormatColumn, PatternFormatColumnIterator</description>
      <method>
        <name>zzub_pattern_format_add_column</name>
        <description>Adds a column to the pattern format.</description>
        <returns>zzub_pattern_format_column_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>idx</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_delete_column</name>
        <description>Removes a column from the pattern format.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_get_iterator</name>
        <description>Returns an iterator over the columns in the pattern format.</description>
        <returns>zzub_pattern_format_column_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_get_column</name>
        <description>Returns the pattern format column for a specified parameter.</description>
        <returns>zzub_pattern_format_column_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_get_name</name>
        <description>Returns the pattern format name.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_set_name</name>
        <description>Sets the pattern format name.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_get_id</name>
        <description>Pattern format ID.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_set_track_name</name>
        <description>Sets the name of a pattern format track.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_get_track_name</name>
        <description>Returns the name of a pattern format track.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_set_track_mute</name>
        <description>Sets the mute state for a pattern format track. Causes pattern events on this track to be ignored during playback.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>state</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_get_track_mute</name>
        <description>Returns the mute state for a pattern format track.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_add_column_filter</name>
        <description>Unused.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>filterformat</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_remove_column_filter</name>
        <description>Unused.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>filterformat</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_get_column_filters</name>
        <description>Unused.</description>
        <returns>zzub_pattern_format_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_get_scroller_width</name>
        <description>Returns the display width of the pattern preview scroller.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_set_scroller_width</name>
        <description>Sets the display width of the pattern preview scroller.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
          <argument>
            <type>int</type>
            <name>width</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_destroy</name>
        <description>Destroys the pattern format and releases allocated resources.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>pattern_format</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_pattern_format_iterator_t</name>
      <description>Helper iterator for a range of pattern formats.</description>
      <method>
        <name>zzub_pattern_format_iterator_next</name>
        <description>Iterates to the next item.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_iterator_t*</type>
            <name>pattern_format_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_iterator_valid</name>
        <description>Returns true if the iterator is valid and it is safe to call current()</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_iterator_t*</type>
            <name>pattern_format_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_iterator_current</name>
        <description>Returns the current item.</description>
        <returns>zzub_pattern_format_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_iterator_t*</type>
            <name>pattern_format_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_iterator_destroy</name>
        <description>Destroys the iterator.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_iterator_t*</type>
            <name>pattern_format_iterator</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_pattern_format_column_t</name>
      <description>Represents a column in a pattern.</description>
      <method>
        <name>zzub_pattern_format_column_get_plugin</name>
        <description>Plugin referenced by this column.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_get_group</name>
        <description>Plugin group referenced by this column.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_get_track</name>
        <description>Plugin track referenced by this column.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_get_column</name>
        <description>Plugin column referenced by this column.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_get_format</name>
        <description>Returns the pattern format where the column is referenced.</description>
        <returns>zzub_pattern_format_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_get_mode</name>
        <description>Return column rendering mode.</description>
        <description>mode 0: default, 1: note, 2: switch, 3: byte, 4: word, 5: slider, 6: button, 7: pianoroll, 8: pattern, 9: collapsed, 10: envelope, 11: character, 12: harmonic</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_set_mode</name>
        <description>Set column rendering mode.</description>
        <description>mode 0: default, 1: note, 2: switch, 3: byte, 4: word, 5: slider, 6: button, 7: pianoroll, 8: pattern, 9: collapsed, 10: envelope, 11: character, 12: harmonic</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_get_collapsed</name>
        <description>Returns true if column is visually collapsed.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_set_collapsed</name>
        <description>Set whether column is visually collapsed.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>is_collapsed</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_get_index</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_set_index</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_t*</type>
            <name>pattern_format_column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>idx</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_pattern_format_column_iterator_t</name>
      <description>Helper iterator for a range of pattern format columns.</description>
      <method>
        <name>zzub_pattern_format_column_iterator_next</name>
        <description>Iterates to the next item.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_iterator_t*</type>
            <name>pattern_format_column_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_iterator_valid</name>
        <description>Returns true if the iterator is valid and it is safe to call current()</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_iterator_t*</type>
            <name>pattern_format_column_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_iterator_current</name>
        <description>Returns the current item.</description>
        <returns>zzub_pattern_format_column_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_iterator_t*</type>
            <name>pattern_format_column_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pattern_format_column_iterator_destroy</name>
        <description>Destroys the iterator.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_pattern_format_column_iterator_t*</type>
            <name>pattern_format_column_iterator</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_parameter_t</name>
      <description>Represents a plugin parameter.</description>
      <method>
        <name>zzub_parameter_get_type</name>
        <description>Returns one of the values in the zzub_parameter_type enumeration.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_parameter_t*</type>
            <name>parameter</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_parameter_get_name</name>
        <description>The parameter name.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_parameter_t*</type>
            <name>parameter</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_parameter_get_description</name>
        <description>Parameter description.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_parameter_t*</type>
            <name>parameter</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_parameter_get_value_min</name>
        <description>Parameter minimum value.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_parameter_t*</type>
            <name>parameter</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_parameter_get_value_max</name>
        <description>Parameter maximum value.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_parameter_t*</type>
            <name>parameter</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_parameter_get_value_none</name>
        <description>Parameter novalue, a value to indicate there is no value.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_parameter_t*</type>
            <name>parameter</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_parameter_get_value_default</name>
        <description>Parameter default value.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_parameter_t*</type>
            <name>parameter</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_parameter_get_flags</name>
        <description>A parameter flag is combined by zero or more values in the zzub_parameter_flag enumeration.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_parameter_t*</type>
            <name>parameter</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_attribute_t</name>
      <description>Represents a plugin attribute.</description>
      <description>Attributes are similar to plugin parameters, but they cannot be automated.</description>
      <method>
        <name>zzub_attribute_get_name</name>
        <description>Attribute name.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_attribute_t*</type>
            <name>attribute</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_attribute_get_value_min</name>
        <description>Attribute minimum value.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_attribute_t*</type>
            <name>attribute</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_attribute_get_value_max</name>
        <description>Attribute maximum value.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_attribute_t*</type>
            <name>attribute</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_attribute_get_value_default</name>
        <description>Attribute default value.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_attribute_t*</type>
            <name>attribute</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_pluginloader_t</name>
      <description>Represents the description of a plugin type.</description>
      <description>Provides access to static properties of a plugin, such as parameter descriptions, attributes, tracks and channel descriptions.</description>
      <method>
        <name>zzub_pluginloader_get_name</name>
        <description>Returns the name of the plugin type.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_short_name</name>
        <description>Returns the short name of the plugin. Used to generate names for new instances of this plugin type.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_parameter_count</name>
        <description>Returns number of parameters. Group 1 = global parameters, group 2 = track parameters, group 3 = event parameters</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_parameter</name>
        <description>Returns the parameter for a group and column. See also zzub_plugin_get_parameter() which also returns parameters in group 0.</description>
        <returns>zzub_parameter_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_attribute_count</name>
        <description>Returns the number of attributes.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_attribute</name>
        <description>Returns an attribute.</description>
        <returns>zzub_attribute_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_flags</name>
        <description>Returns the flags for this plugin loader. Combined by zero or more values in the zzub_plugin_flag enumeration.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_uri</name>
        <description>Returns a string uniquely identifying this plugin type.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_author</name>
        <description>Returns the name of the plugin author.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_instrument_list</name>
        <description>Returns a list of plugin-defined instruments.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
          <argument>
            <type>char*</type>
            <name>result</name>
          </argument>
          <argument>
            <type>int</type>
            <name>maxbytes</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_tracks_min</name>
        <description>Returns the minimum number of tracks.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_tracks_max</name>
        <description>Returns the maximum number of tracks.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_stream_format_count</name>
        <description>Returns the number of supported stream formats. Used with plugins flagged zzub_plugin_flag_stream.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_stream_format_ext</name>
        <description>Returns a supported stream file format extension stream. Used with plugins flagged zzub_plugin_flag_stream.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_output_channel_count</name>
        <description>Returns the maximum number of output audio channels the plugin intends to use.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_input_channel_count</name>
        <description>Returns the maximum number of input audio channels the plugin intends to use.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_plugin_file</name>
        <description>Returns the full path to the wrapped plugin. Returns blank for built-in plugins.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_pluginloader_get_plugincollection</name>
        <description>Returns the plugin collection where this pluginloader belongs</description>
        <returns>zzub_plugincollection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>pluginloader</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_plugin_t</name>
      <description>Plugin methods</description>
      <description>Retreive more details about plugins.</description>
      <method>
        <name>zzub_plugin_destroy</name>
        <description>Deletes a plugin</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_load</name>
        <description>Load plugin state.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_input_t*</type>
            <name>input</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_save</name>
        <description>Save plugin state.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_output_t*</type>
            <name>ouput</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_name</name>
        <description>Renames a plugin. Should fail and return -1 if the name already exists.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_name</name>
        <description>Retreive the name of a plugin.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_id</name>
        <description>Retreive the unique per-session id of a plugin. See also zzub_player_get_plugin_by_id().</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_position_x</name>
        <description>Returns the screen position coordinates for the plugin. Values are expected to be in the range -1..1.</description>
        <returns>float</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_position_y</name>
        <returns>float</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_position</name>
        <description>Sets the plugin screen position. Values are expected to be in the range -1..1.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>float</type>
            <name>x</name>
          </argument>
          <argument>
            <type>float</type>
            <name>y</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_position_direct</name>
        <description>Sets the plugin screen position. Values are expected to be in the range -1..1. This method is not undoable.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>float</type>
            <name>x</name>
          </argument>
          <argument>
            <type>float</type>
            <name>y</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_flags</name>
        <description>Returns flags for this plugin. Shorthand for using zzub_pluginloader_get_flags(). Combined by zero or more values in the zzub_plugin_flag enumeration.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_track_count</name>
        <description>Returns the number of tracks.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_track_count</name>
        <description>Sets the number of tracks. Will call plugin::set_track_count() from the player thread.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>count</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_mute</name>
        <description>Returns 1 if plugin is muted, otherwise 0.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_mute</name>
        <description>Set whether plugin is muted. 1 for muted, 0 for normal.</description>
        <description>A muted machine does not produce any sound.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>muted</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_bypass</name>
        <description>Returns 1 if plugin is bypassed, otherwise 0.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_bypass</name>
        <description>Set whether plugin is bypassed. 1 for bypass, 0 for normal.</description>
        <description>Bypass causes no processing to occur in the given machine.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>muted</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_minimize</name>
        <description>Returns true if the plugin is (visually) minimized.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_minimize</name>
        <description>Display the plugin as (visually) minimized.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>minimized</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_configure</name>
        <description>Configure a plugin option. this is e.g. used by the recorder plugin to</description>
        <description>specify a file path to write to.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>key</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_commands</name>
        <description>Returns a string of \\\\n-separated command strings</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>char*</type>
            <name>commands</name>
          </argument>
          <argument>
            <type>int</type>
            <name>maxlen</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_sub_commands</name>
        <description>When a plugin command string starts with the char '\\', it has subcommands.</description>
        <description>Unexpectedly, zzub_plugin_get_sub_commands returns a \\\\n-separated string (like get_commands).</description>
        <description>Some plugins need to be ticked before calling get_sub_commands.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>i</name>
          </argument>
          <argument>
            <type>char*</type>
            <name>commands</name>
          </argument>
          <argument>
            <type>int</type>
            <name>maxlen</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_command</name>
        <description>Invoke a command on the plugin.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>i</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_pluginloader</name>
        <description>Returns the pluginloader used to create this plugin.</description>
        <returns>zzub_pluginloader_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_midi_output_device_count</name>
        <description>Returns the number of virtual MIDI devices implemented by the plugin.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_midi_output_device</name>
        <description>Returns the name of a virtual MIDI device.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_envelope_count</name>
        <description>Returns the number of envelopes the plugin supports.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_envelope_flags</name>
        <description>Returns envelope flags.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_envelope_name</name>
        <description>Returns envelope name.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_stream_source</name>
        <description>Sets an audio stream resource identifier.</description>
        <description>E.g a filename, url or wavetable index. Supported by plugins flagged zzub_plugin_flag_stream.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>resource</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_stream_source</name>
        <description>Returns an audio stream resource identifier.</description>
        <description>E.g a filename, url or wavetable index. Supported by plugins flagged zzub_plugin_flag_stream.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_instrument</name>
        <description>Sets the plugin instrument (d'oh!)</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_describe_value</name>
        <description>Creates a textual description of the given value. .</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_parameter_value</name>
        <description>Returns the last written value of the requested parameter.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_parameter_value</name>
        <description>Sets the value of a plugin parameter. The method will wait for the player thread to pick up the modified value and call process_events().</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>record</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_parameter_value_direct</name>
        <description>Sets the value of a plugin parameter. Unlike zzub_plugin_set_parameter_value(), this method returns immediately. The parameter will be changed later when the player thread notices the modified value. Is also not undoable.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
          <argument>
            <type>int</type>
            <name>record</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_parameter_count</name>
        <description>Returns number of parameters in a given plugin group. Shortcut for zzub_pluginloader_get_parameter_count().</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_parameter</name>
        <description>Returns a parameter description.</description>
        <returns>zzub_parameter_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_parameter_interpolator</name>
        <description>Returns the parameter interpolation mode.</description>
        <description>Mode 0 = absolute, 1 = inertial, 2 = linear</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_parameter_interpolator</name>
        <description>Sets the parameter interpolation mode.</description>
        <description>Mode 0 = absolute, 1 = inertial, 2 = linear</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>column</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_input_connection_count</name>
        <description>Returns the number of input connections for given plugin.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_input_connection</name>
        <description>Returns an index-based connection object.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_input_connection_by_type</name>
        <description>Returns the input connection index for given plugin and connection type.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>from_plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>type</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_output_connection_count</name>
        <description>Returns the number of output connections for given plugin.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_output_connection</name>
        <description>Returns an index-based connection object.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_output_connection_by_type</name>
        <description>Returns the output connection index for given plugin and connection type.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>from_plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>type</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_create_audio_connection</name>
        <description>Connects two audio plugins. Feedback loops permitted.</description>
        <description>Use zzub_connection_destroy() to disconnect.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>from_plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>first_input</name>
          </argument>
          <argument>
            <type>int</type>
            <name>input_count</name>
          </argument>
          <argument>
            <type>int</type>
            <name>first_output</name>
          </argument>
          <argument>
            <type>int</type>
            <name>output_count</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_create_midi_connection</name>
        <description>Connects two MIDI plugins. Feedback loops not permitted.</description>
        <description>Use zzub_connection_destroy() to disconnect.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>from_plugin</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>midi_device</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_create_event_connection</name>
        <description>Connects a controller plugin to another plugin.</description>
        <description>Use zzub_connection_add_event_connection_binding() to map parameters. Use zzub_connection_destroy() to disconnect.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>from_plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_create_note_connection</name>
        <description>Connects two plugins with note parameters.</description>
        <description>Use zzub_connection_destroy() to disconnect.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>from_plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_last_peak</name>
        <description>Returns a value from the mixer between 0..1 for right/left to indicate current peak levels.</description>
        <returns>float</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>channel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_last_cpu_load</name>
        <description>Returns a value from the mixer between 0..1 for a current estimated CPU load.</description>
        <returns>double</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_last_midi_result</name>
        <description>Returns non-zero if the plugin recently outputted MIDI.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_last_audio_result</name>
        <description>Returns non-zero if the plugin recently outputted audio.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_tick</name>
        <description>Process changed parameters. immediate == true is only allowed on a plugin after create_plugin() and before the following barrier(). When immediate==false, the plugin will be processed after barrier().</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>immediate</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_attribute_value</name>
        <description>Retreives a plugin attribute value. Refer to zzub_pluginloader_t for attribute counts and descriptions.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_attribute_value</name>
        <description>Sets a plugin attribute value. Refer to zzub_pluginloader_t for attribute counts and descriptions.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_play_midi_note</name>
        <description>Plays a note.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>note</name>
          </argument>
          <argument>
            <type>int</type>
            <name>prevNote</name>
          </argument>
          <argument>
            <type>int</type>
            <name>velocity</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_timesource</name>
        <description>Sets the current time source for this plugin.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>timesource</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_timesource_plugin</name>
        <description>Returns the current time source plugin for this plugin.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_timesource_group</name>
        <description>Returns the current time source plugin parameter group for this plugin.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_timesource_track</name>
        <description>Returns the current time source plugin parameter track for this plugin.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_output_channel_count</name>
        <description>Returns the actual number of output audio channels the plugin intends to use.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_input_channel_count</name>
        <description>Returns the actual number of input audio channels the plugin intends to use.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_output_channel_name</name>
        <description>Returns the designated name of this output channel.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_input_channel_name</name>
        <description>Returns the designated name of this input channel.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_encoder_digest</name>
        <description>Request out-of-graph float data from a plugin. Used by e.g a visualizer plugin to return raw visualizer data to the host for rendering.</description>
        <description>When buffers is NULL, the chunk size is returned.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>type</name>
          </argument>
          <argument>
            <type>float**</type>
            <name>buffers</name>
          </argument>
          <argument>
            <type>int</type>
            <name>numsamples</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_connection</name>
        <description>Returns the associated connection object on plugins with with the is_connection flag.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_has_embedded_gui</name>
        <description>Returns true if the plugin implements an embeddable user interface.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_create_embedded_gui</name>
        <description>Attaches an embedded user interface to the provided parent window handle.</description>
        <description>Returns false if the plugin does not support embeddable user interface.</description>
        <description>This method exists as a common way to implement plugin-specific content in parameter views.</description>
        <description>The implementation depends on the plugin wrapper and the host operating system.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>void*</type>
            <name>hwnd</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_resize_embedded_gui</name>
        <description>Request resize of the embedded user interface.</description>
        <description>The plugin receives a suggested target size in the width and height parameters, but can choose to resize itself to any size and return the final width and height in the respective output parameters. These could differ from the target size when the user interface has a minimum or fixed size in any direction.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>void*</type>
            <name>hwnd</name>
          </argument>
          <argument>
            <type>int</type>
            <name>width</name>
          </argument>
          <argument>
            <type>int</type>
            <name>height</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_latency</name>
        <description>Sets the plugins latency compensation in number of samples. -1 = let plugin decide</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>samplecount</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_latency</name>
        <description>Returns the plugins latency compensation in samples. If the return value is -1, the plugin decides the latency. Use get_latency_actual() to retrieve the actual plugin latency compensation.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_latency_actual</name>
        <description>Returns the actual plugins latency compensation in samples.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_get_plugin_group</name>
        <description>Returns a group object in which this plugin resides.</description>
        <returns>zzub_plugin_group_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_set_plugin_group</name>
        <description>Moves the plugin to the group. Use group=NULL to set to the root group.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>group</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_plugin_iterator_t</name>
      <description>Helper iterator for a range of plugins.</description>
      <method>
        <name>zzub_plugin_iterator_next</name>
        <description>Iterates to the next item.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_iterator_t*</type>
            <name>plugin_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_iterator_valid</name>
        <description>Returns true if the iterator is valid and it is safe to call current()</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_iterator_t*</type>
            <name>plugin_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_iterator_current</name>
        <description>Returns the current item.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_iterator_t*</type>
            <name>plugin_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_iterator_destroy</name>
        <description>Destroys the iterator.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_iterator_t*</type>
            <name>plugin_iterator</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_connection_t</name>
      <description>Describes a connection between two plugins.</description>
      <description>There are three kinds of connections: Audio, MIDI and event connections.</description>
      <description>To create a connection, see zzub_player_create_audio_connection(), zzub_player_create_midi_connection() and zzub_player_create_event_connection().</description>
      <method>
        <name>zzub_connection_destroy</name>
        <description>Destroys the connection and frees all resources.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_type</name>
        <description>Returns the type of connection. See <see>zzub_connection_type</see> enumeration.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_from_plugin</name>
        <description>Returns the 'from'-plugin. The plugin whose input signal this connection relates to.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_to_plugin</name>
        <description>Returns the 'to'-plugin. The receiver plugin of signals going through this connection.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_connection_plugin</name>
        <description>Returns the underlying connection plugin which was created when the connection was made.</description>
        <description>E.g the audio connection plugin has automatable parameters for controlling amp on each channel.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_first_input</name>
        <description>Audio connections: Returns the first input channel.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_set_first_input</name>
        <description>Audio connections: Set the first input channel.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_input_count</name>
        <description>Audio connections: Returns the number of input channels.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_set_input_count</name>
        <description>Audio connections: Set the number of input channels.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_first_output</name>
        <description>Audio connections: Returns the first output channel.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_set_first_output</name>
        <description>Audio connections: Set the first output channel.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_output_count</name>
        <description>Audio connections: Returns the number of output channels.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_set_output_count</name>
        <description>Audio connections: Set the number of output channels.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
          <argument>
            <type>int</type>
            <name>value</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_set_midi_device</name>
        <description>MIDI connections: Sets the name of the receiving MIDI device</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>midi_device</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_midi_device</name>
        <description>MIDI connections: Returns the name of the receiving MIDI device</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_event_binding_count</name>
        <description>Event connections: Returns the number of event connection bindings.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_add_event_connection_binding</name>
        <description>Event connections: Adds an event connection binding.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
          <argument>
            <type>int</type>
            <name>sourceparam</name>
          </argument>
          <argument>
            <type>int</type>
            <name>targetgroup</name>
          </argument>
          <argument>
            <type>int</type>
            <name>targettrack</name>
          </argument>
          <argument>
            <type>int</type>
            <name>targetparam</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_remove_event_connection_binding</name>
        <description>Event connections: Removes the event connection binding.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
          <argument>
            <type>int</type>
            <name>sourceparam</name>
          </argument>
          <argument>
            <type>int</type>
            <name>targetgroup</name>
          </argument>
          <argument>
            <type>int</type>
            <name>targettrack</name>
          </argument>
          <argument>
            <type>int</type>
            <name>targetparam</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_get_event_binding_iterator</name>
        <description>Event connections: Returns all current event bindings for an event connection.</description>
        <returns>zzub_connection_binding_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_connection_t*</type>
            <name>connection</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_connection_binding_t</name>
      <description>Event connection binding between a controller plugin and a parameter on the connected plugin.</description>
      <method>
        <name>zzub_connection_binding_get_connection</name>
        <description>Returns the owner connection of this event binding.</description>
        <returns>zzub_connection_t*</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_t*</type>
            <name>connection_binding</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_binding_get_source_column</name>
        <description>Returns the parameter in group 3 on the source plugin being mapped.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_t*</type>
            <name>connection_binding</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_binding_get_target_group</name>
        <description>Returns the target parameter group.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_t*</type>
            <name>connection_binding</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_binding_get_target_track</name>
        <description>Returns the target parameter track.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_t*</type>
            <name>connection_binding</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_binding_get_target_column</name>
        <description>Returns the target parameter column.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_t*</type>
            <name>connection_binding</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_connection_binding_iterator_t</name>
      <description>Collection of event connection bindings.</description>
      <method>
        <name>zzub_connection_binding_iterator_next</name>
        <description>Iterates to the next item.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_iterator_t*</type>
            <name>connection_binding_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_binding_iterator_valid</name>
        <description>Returns true if the iterator is valid and it is safe to call current()</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_iterator_t*</type>
            <name>connection_binding_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_binding_iterator_current</name>
        <description>Returns the current item.</description>
        <returns>zzub_connection_binding_t*</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_iterator_t*</type>
            <name>connection_binding_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_binding_iterator_reset</name>
        <description>Resets the iterator to the start.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_iterator_t*</type>
            <name>connection_binding_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_connection_binding_iterator_destroy</name>
        <description>Destroys the iterator.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_connection_binding_iterator_t*</type>
            <name>connection_binding_iterator</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_wave_t</name>
      <description>Wave table</description>
      <method>
        <name>zzub_wave_get_id</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_get_index</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_clear</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_get_name</name>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_set_name</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_get_path</name>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_set_path</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>path</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_get_flags</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_set_flags</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
          <argument>
            <type>int</type>
            <name>flags</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_get_volume</name>
        <returns>float</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_set_volume</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
          <argument>
            <type>float</type>
            <name>volume</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_get_envelope_count</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_set_envelope_count</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
          <argument>
            <type>int</type>
            <name>count</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_get_envelope</name>
        <returns>zzub_envelope_t*</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_set_envelope</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>env</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_get_level_count</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_get_level</name>
        <returns>zzub_wavelevel_t*</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_add_level</name>
        <returns>zzub_wavelevel_t*</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_remove_level</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wave_t*</type>
            <name>wave</name>
          </argument>
          <argument>
            <type>int</type>
            <name>level</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_wavelevel_t</name>
      <description>Wavelevel</description>
      <method>
        <name>zzub_wavelevel_get_id</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_get_wave</name>
        <returns>zzub_wave_t*</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_clear</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_get_sample_count</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_set_sample_count</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>count</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_get_root_note</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_set_root_note</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>note</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_get_samples_per_second</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_set_samples_per_second</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>sps</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_get_loop_start</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_set_loop_start</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pos</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_get_loop_end</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_set_loop_end</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pos</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_get_format</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_set_format</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>format</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_load_wav</name>
        <description>Loads a .WAV from a file or memory stream.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>offset</name>
          </argument>
          <argument>
            <type>int</type>
            <name>clear</name>
          </argument>
          <argument>
            <type>zzub_input_t*</type>
            <name>datastream</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_save_wav</name>
        <description>Saves the entire wavelevel to a .WAV on file or memory.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>zzub_output_t*</type>
            <name>datastream</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_save_wav_range</name>
        <description>Saves a range of the wavelevel to a .WAV on file or in memory.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>zzub_output_t*</type>
            <name>datastream</name>
          </argument>
          <argument>
            <type>int</type>
            <name>start</name>
          </argument>
          <argument>
            <type>int</type>
            <name>numsamples</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_insert_sample_range</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>start</name>
          </argument>
          <argument>
            <type>void*</type>
            <name>buffer</name>
          </argument>
          <argument>
            <type>int</type>
            <name>channels</name>
          </argument>
          <argument>
            <type>int</type>
            <name>format</name>
          </argument>
          <argument>
            <type>int</type>
            <name>numsamples</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_remove_sample_range</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>start</name>
          </argument>
          <argument>
            <type>int</type>
            <name>numsamples</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_replace_sample_range</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>start</name>
          </argument>
          <argument>
            <type>void*</type>
            <name>buffer</name>
          </argument>
          <argument>
            <type>int</type>
            <name>channels</name>
          </argument>
          <argument>
            <type>int</type>
            <name>format</name>
          </argument>
          <argument>
            <type>int</type>
            <name>numsamples</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_get_samples_digest</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>channel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>start</name>
          </argument>
          <argument>
            <type>int</type>
            <name>end</name>
          </argument>
          <argument>
            <type>float*</type>
            <name>mindigest</name>
          </argument>
          <argument>
            <type>float*</type>
            <name>maxdigest</name>
          </argument>
          <argument>
            <type>float*</type>
            <name>ampdigest</name>
          </argument>
          <argument>
            <type>int</type>
            <name>digestsize</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_get_slices</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>slicecount</name>
          </argument>
          <argument>
            <type>int*</type>
            <name>slices</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_set_slices</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>slicecount</name>
          </argument>
          <argument>
            <type>const int*</type>
            <name>slices</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wavelevel_process_sample_range_offline</name>
        <description>Applies an offline plugin effect to the wave range. Requires the plugin_flag_is_offline.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>wavelevel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>start</name>
          </argument>
          <argument>
            <type>int</type>
            <name>numsamples</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_envelope_t</name>
      <description>Envelopes</description>
      <method>
        <name>zzub_envelope_get_attack</name>
        <returns>unsigned short</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_get_decay</name>
        <returns>unsigned short</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_get_sustain</name>
        <returns>unsigned short</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_get_release</name>
        <returns>unsigned short</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_set_attack</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>unsigned short</type>
            <name>attack</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_set_decay</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>unsigned short</type>
            <name>decay</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_set_sustain</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>unsigned short</type>
            <name>sustain</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_set_release</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>unsigned short</type>
            <name>release</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_get_subdivision</name>
        <returns>char</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_set_subdivision</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>char</type>
            <name>subdiv</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_get_flags</name>
        <returns>char</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_set_flags</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>char</type>
            <name>flags</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_is_enabled</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_enable</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>int</type>
            <name>enable</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_get_point_count</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_get_point</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
          <argument>
            <type>unsigned short</type>
            <name>x</name>
          </argument>
          <argument>
            <type>unsigned short</type>
            <name>y</name>
          </argument>
          <argument>
            <type>char</type>
            <name>flags</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_set_point</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
          <argument>
            <type>unsigned short</type>
            <name>x</name>
          </argument>
          <argument>
            <type>unsigned short</type>
            <name>y</name>
          </argument>
          <argument>
            <type>char</type>
            <name>flags</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_insert_point</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_envelope_delete_point</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_envelope_t*</type>
            <name>envelope</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_mixer_t</name>
      <description>Mixer Methods - provides access to the mixer in native plugins</description>
    </class>
    <class>
      <name>zzub_validation_error_iterator_t</name>
      <description>Contains validation warnings and errors.</description>
      <description>Validation errors are created when plugin incompabilities are detected.</description>
      <description>E.g if an older plugin was used to save a song, or was in the plugin cache.</description>
      <method>
        <name>zzub_validation_error_iterator_next</name>
        <description>Iterates to the next item.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_iterator_t*</type>
            <name>validation_error_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_iterator_valid</name>
        <description>Returns true if the iterator is valid and it is safe to call current()</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_iterator_t*</type>
            <name>validation_error_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_iterator_current</name>
        <description>Returns the current item.</description>
        <returns>zzub_validation_error_t*</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_iterator_t*</type>
            <name>validation_error_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_iterator_reset</name>
        <description>Resets the iterator to the start.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_iterator_t*</type>
            <name>validation_error_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_iterator_destroy</name>
        <description>Destroys the iterator.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_iterator_t*</type>
            <name>validation_error_iterator</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_validation_error_t</name>
      <description>Used by song importers for details about compatibility problems with plugins and parameters during load.</description>
      <method>
        <name>zzub_validation_error_get_type</name>
        <description>Returns a value from the ValidationErrorType enum.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_t*</type>
            <name>validation_error</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_get_group</name>
        <description>Returns the parameter group.</description>
        <description>Used for parameter validation errors, otherwise undefined.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_t*</type>
            <name>validation_error</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_get_column</name>
        <description>Returns the parameter column.</description>
        <description>Used for parameter validation errors, otherwise undefined.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_t*</type>
            <name>validation_error</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_get_found_value</name>
        <description>Returns the original parameter value loaded from a song or the cache.</description>
        <description>Used for parameter validation errors, otherwise undefined.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_t*</type>
            <name>validation_error</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_get_expected_value</name>
        <description>Returns the expected parameter value as reported by the plugin itself.</description>
        <description>Used for parameter validation errors, otherwise undefined.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_t*</type>
            <name>validation_error</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_get_parameter_name</name>
        <description>Returns the original name of the parameter as loaded from a song or the cache.</description>
        <description>Used for parameter validation errors, otherwise undefined.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_t*</type>
            <name>validation_error</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_get_plugin_name</name>
        <description>Returns the original name of the affected plugin as loaded from a song or the cache.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_t*</type>
            <name>validation_error</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_validation_error_get_pluginloader</name>
        <description>Returns the affected plugin loader. Could be a dummy.</description>
        <description>The returned pluginloader should not be used to create new plugin instances, but is rather intended for informational purposes. Such as displaying a load report to the user or inline song fixing.</description>
        <returns>zzub_pluginloader_t*</returns>
        <arguments>
          <argument>
            <type>zzub_validation_error_t*</type>
            <name>validation_error</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_player_t</name>
      <description>Player Methods</description>
      <method>
        <name>zzub_player_create</name>
        <description>Creates a new player instance.</description>
        <returns>zzub_player_t*</returns>
        <arguments />
      </method>
      <method>
        <name>zzub_player_destroy</name>
        <description>Destroys the player instance and all its resources.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_initialize</name>
        <description>Inititializes the player.</description>
        <description>initialize() must be called only after the audio driver is set up.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>samplesPerSecond</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_load_armz</name>
        <description>Load an ARMZ project from disk.</description>
        <description>The filename can be a waveless uncompressed database, or a zipped .armz.</description>
        <description>mode=0: clear+load  mode=1: import, optionally into a plugin group</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>fileName</name>
          </argument>
          <argument>
            <type>int</type>
            <name>mode</name>
          </argument>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugingroup</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_save_armz</name>
        <description>Save current project to disk.</description>
        <description>If the filename has extension .armdb it is saved as waveless database.</description>
        <description>Unless the plugins array is empty, only data associated with the specified plugins is saved.</description>
        <description>If a plugins array is specified and a plugin group is given, plugins will be moved relative to the group parameter.</description>
        <description>Load warnings and error messages can be retreived with get_validation_errors().</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>fileName</name>
          </argument>
          <argument>
            <type>const zzub_plugin_t**</type>
            <name>plugins</name>
          </argument>
          <argument>
            <type>int</type>
            <name>plugincount</name>
          </argument>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugingroup</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_load_bmx</name>
        <description>Imports a BMX from memory or file.</description>
        <description>Load warnings and error messages can be retreived with get_validation_errors().</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_input_t*</type>
            <name>datastream</name>
          </argument>
          <argument>
            <type>int</type>
            <name>flags</name>
          </argument>
          <argument>
            <type>float</type>
            <name>x</name>
          </argument>
          <argument>
            <type>float</type>
            <name>y</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_load_module</name>
        <description>Imports an oldschool tracker module from disk. Supports MOD, IT, S3M.</description>
        <description>Imported songs use the built-in modplug plugin.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>fileName</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_validation_errors</name>
        <description>Returns an iterator for all plugin validation errors.</description>
        <description>The caller must destroy the iterator.</description>
        <returns>zzub_validation_error_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_state</name>
        <description>Returns one of the values in the state enumeration.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_state</name>
        <description>Set player state. Takes one of the values in the state enumeration as parameter.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>state</name>
          </argument>
          <argument>
            <type>int</type>
            <name>stoprow</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pluginloader_count</name>
        <description>Returns number of plugin loaders.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pluginloader</name>
        <description>Returns a zzub_pluginloader_t handle by index.</description>
        <returns>zzub_pluginloader_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pluginloader_by_name</name>
        <description>Finds a zzub_pluginloader_t handle by uri.</description>
        <returns>zzub_pluginloader_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_plugin_count</name>
        <description>Returns number of plugins in the current song.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_add_midimapping</name>
        <returns>zzub_midimapping_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>param</name>
          </argument>
          <argument>
            <type>int</type>
            <name>channel</name>
          </argument>
          <argument>
            <type>int</type>
            <name>controller</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_remove_midimapping</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
          <argument>
            <type>int</type>
            <name>group</name>
          </argument>
          <argument>
            <type>int</type>
            <name>track</name>
          </argument>
          <argument>
            <type>int</type>
            <name>param</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_plugin_by_name</name>
        <description>Returns the plugin object given the plugins name.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_plugin_by_id</name>
        <description>Returns the plugin object given the plugin id. See also zzub_plugin_get_id().</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>id</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_plugin</name>
        <description>Returns the plugin object given the plugins index in the graph.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_plugin_iterator</name>
        <description>Returns an iterator for all plugins. Faster than get_plugin_count()/get_plugin().</description>
        <returns>zzub_plugin_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_iterator</name>
        <description>Returns an iterator for all patterns. Faster than get_pattern_count()/get_pattern().</description>
        <returns>zzub_pattern_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_by_id</name>
        <description>Returns a pattern by its id.</description>
        <returns>zzub_pattern_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>id</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_by_index</name>
        <description>Returns a pattern by its index, oldest first.</description>
        <returns>zzub_pattern_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_event_by_id</name>
        <description>Returns a pattern event by its id.</description>
        <returns>zzub_pattern_event_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>id</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_new_pattern_name</name>
        <description>Returns a suggested name for a new pattern</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>format</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>description</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_count</name>
        <description>Returns total count of patterns.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_by_name</name>
        <description>Returns the index of the pattern with the given name</description>
        <returns>zzub_pattern_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_format_count</name>
        <description>Returns the number of pattern formats.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_new_pattern_format_name</name>
        <description>Generates a name for a new pattern format.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>description</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_format_by_name</name>
        <description>Returns a pattern format by name.</description>
        <returns>zzub_pattern_format_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_format_by_index</name>
        <description>Returns a pattern format by its index.</description>
        <returns>zzub_pattern_format_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_format_by_id</name>
        <description>Returns a pattern format by its id.</description>
        <returns>zzub_pattern_format_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>id</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_pattern_format_iterator</name>
        <description>Returns an iterator for all pattern formats. Faster than get_pattern_format_count()/get_pattern_format_by_index().</description>
        <returns>zzub_pattern_format_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_work_stereo</name>
        <description>For silent processing. .</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const float**</type>
            <name>inbuffers</name>
          </argument>
          <argument>
            <type>float**</type>
            <name>outbuffers</name>
          </argument>
          <argument>
            <type>int</type>
            <name>inchannels</name>
          </argument>
          <argument>
            <type>int</type>
            <name>outchannels</name>
          </argument>
          <argument>
            <type>int</type>
            <name>numsamples</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_clear</name>
        <description>Resets everything and clears the current project.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_wave_count</name>
        <description>Returns the number of waves in the wavetable (hardcoded to 200).</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_wave</name>
        <description>Returns the wave by index in the range 0-199.</description>
        <returns>zzub_wave_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_add_callback</name>
        <description>Adds a function that receives events.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_callback_t</type>
            <name>callback</name>
          </argument>
          <argument>
            <type>void*</type>
            <name>tag</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_remove_callback</name>
        <description>Removes a function that receives events.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_callback_t</type>
            <name>callback</name>
          </argument>
          <argument>
            <type>void*</type>
            <name>tag</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_handle_events</name>
        <description>Process player events.</description>
        <description>Intended to be called by the host in a timer or on idle processing to receive events about parameter changes etc.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_midimapping</name>
        <description>Returns the MIDI mapping by index.</description>
        <returns>zzub_midimapping_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_midimapping_count</name>
        <description>Returns the number of MIDI mappings.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_automation</name>
        <description>Returns true if parameters are currently being recorded into patterns.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_automation</name>
        <description>Set to true to begin recording parameter changes into patterns.</description>
        <description>Recording will reset on song stop.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>enable</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_midi_transport</name>
        <description>Returns true if the engine handles play/stop/seek MIDI messages on any open MIDI input devices.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_midi_transport</name>
        <description>Set to true to handle MIDI play/stop/seek messages on any open MIDI input devices.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>enable</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_infotext</name>
        <description>Returns the song comment.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_infotext</name>
        <description>Sets the song comment.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>text</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_midi_plugin</name>
        <description>Sets the plugin to receive MIDI data if the plugin's internal MIDI channel is set to the special channel 17 (\"Play if selected\").</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_plugin_t*</type>
            <name>plugin</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_midi_plugin</name>
        <description>Returns the current MIDI plugin.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_midi_lock</name>
        <description>Returns true if the mixer has midi lock (will ignore set_midi_plugin()-calls)</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_midi_lock</name>
        <description>enables/disables midi locks, which will ignore/enable set_midi_plugin-calls</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>state</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_new_plugin_name</name>
        <description>Generates a new plugin name that can be used in a call to create_plugin().</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>uri</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_reset_keyjazz</name>
        <description>Resets all internal keyjazz buffers.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_create_plugin</name>
        <description>Create a new plugin</description>
        <description>If there was a problem during plugin creation, such as having an older version in the cache, warnings and error messages can be retreived with get_validation_errors().</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_input_t*</type>
            <name>input</name>
          </argument>
          <argument>
            <type>int</type>
            <name>dataSize</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>instanceName</name>
          </argument>
          <argument>
            <type>zzub_pluginloader_t*</type>
            <name>loader</name>
          </argument>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>group</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_create_pattern</name>
        <description>Create a new pattern</description>
        <returns>zzub_pattern_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>format</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>description</name>
          </argument>
          <argument>
            <type>int</type>
            <name>rows</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_clone_pattern</name>
        <description>Clone a pattern</description>
        <returns>zzub_pattern_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>description</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_create_pattern_format</name>
        <description>Create a new pattern description</description>
        <returns>zzub_pattern_format_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>description</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_clone_pattern_format</name>
        <description>Clone a pattern format</description>
        <returns>zzub_pattern_format_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_pattern_format_t*</type>
            <name>format</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>description</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_undo</name>
        <description>Rolls back all editing operations one step. Each step is defined with a call to zzub_player_history_commit().</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_redo</name>
        <description>Redoes all editing operations since last call to zzub_player_history_commit().</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_history_enable</name>
        <description>Enable/disable undo/redo recording. Returns the previous state.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>state</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_history_begin</name>
        <description>Sets user data for events sent by the engine. User data is valid until it is cleared in history_commit().</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>void*</type>
            <name>userdata</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_history_commit</name>
        <description>Commits the last operations to the mixer and undo buffer and marks a new undo step.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>redo_id</name>
          </argument>
          <argument>
            <type>int</type>
            <name>undo_id</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>description</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_history_get_uncomitted_operations</name>
        <description>Returns the count of uncomitted operations.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_history_reset</name>
        <description>Clears the undo buffer and frees all associated resources.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_history_get_size</name>
        <description>Returns the size of the undo buffer.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_history_get_position</name>
        <description>Returns the current position in the undo buffer.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_history_get_description</name>
        <description>Returns the description of an operation in the undo buffer.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>position</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_host_info</name>
        <description>Set versioned, host-specific data. Plugins can retreive a pointer to this information with _host->get_host_info().</description>
        <description>Use and/or dependence on the host's version is regarded as bad practise and should not be used in new code.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>id</name>
          </argument>
          <argument>
            <type>int</type>
            <name>version</name>
          </argument>
          <argument>
            <type>void*</type>
            <name>host_ptr</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_invoke_event</name>
        <description>Invokes event handlers for an internal event.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_event_data_t*</type>
            <name>data</name>
          </argument>
          <argument>
            <type>int</type>
            <name>immediate</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_order_length</name>
        <description>Sets the order list length.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>length</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_order_length</name>
        <description>Returns the order list length.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_order_pattern</name>
        <description>Sets a pattern in the order list by index.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pattern</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_order_pattern</name>
        <description>Returns a pattern from the order list by index.</description>
        <returns>zzub_pattern_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_order_iterator</name>
        <description>Returns an iterator over all patterns in the orderlist. The iterator might contain NULLs for blank entries in the order list.</description>
        <returns>zzub_pattern_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_order_loop_start</name>
        <description>Returns the order list loop start index.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_order_loop_start</name>
        <description>Sets the order list loop start index.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pos</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_order_loop_end</name>
        <description>Returns the order list loop end index.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_order_loop_end</name>
        <description>Sets the order list loop end index.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pos</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_order_loop_enabled</name>
        <description>Returns true if order list looping is enabled.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_order_loop_enabled</name>
        <description>Sets whether order list looping is enabled.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>enable</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_queue_order_index</name>
        <description>Sets the order list queue index.</description>
        <description>The order list will skip to the queue index when the current pattern ends.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>pos</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_queue_order_index</name>
        <description>Returns the current queue index.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_timeshift_order</name>
        <description>Timeshifts the orderlist play position. Does not actually change the order list contents.</description>
        <description>Adds a cookie on the undo buffer which adjusts the currently playing order list index accordingly, handling any race issues in the audio thread.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>fromindex</name>
          </argument>
          <argument>
            <type>int</type>
            <name>timeshift</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_position_order</name>
        <description>Returns the current order list position.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_position_row</name>
        <description>Returns the current pattern position in the current order list pattern.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_position_samples</name>
        <description>Returns the number of samples played since playback started.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_position</name>
        <description>Sets the song position at an order list index and a pattern row.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>orderindex</name>
          </argument>
          <argument>
            <type>int</type>
            <name>tick</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_adjust_position_order</name>
        <description>Redundant?</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>orderindex</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_bpm</name>
        <description>Returns the global sequence BPM.</description>
        <returns>float</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_tpb</name>
        <description>Returns the global sequence TBP.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_bpm</name>
        <description>Sets the global sequence BPM.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>float</type>
            <name>bpm</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_tpb</name>
        <description>Sets the global sequence TPB.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>tpb</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_timesource_count</name>
        <description>Returns the number of available time sources in the project.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_timesource_plugin</name>
        <description>Returns the plugin for a time source.</description>
        <returns>zzub_plugin_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_timesource_group</name>
        <description>Returns the plugin parameter group for a time source.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_timesource_track</name>
        <description>Returns the plugin parameter track for a time source.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_play_pattern</name>
        <description>Plays a single pattern.</description>
        <description>This merely starts playback for a single pattern and does not affect the global song state or counters.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_pattern_t*</type>
            <name>pat</name>
          </argument>
          <argument>
            <type>int</type>
            <name>row</name>
          </argument>
          <argument>
            <type>int</type>
            <name>stoprow</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_machineview_offset_x</name>
        <description>Rendering hint; all plugins should be offset by this amount when rendered.</description>
        <returns>double</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_machineview_offset_y</name>
        <returns>double</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_machineview_offset</name>
        <description>Rendering hint; sets how much all plugins should be offset in the machine view.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>double</type>
            <name>x</name>
          </argument>
          <argument>
            <type>double</type>
            <name>y</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_thread_count</name>
        <description>Returns the current number of mixer worker threads. Returns 1 by default.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_set_thread_count</name>
        <description>Changes the number of mixer worker threads. The threads argument must be greater than or equal to 1.</description>
        <description>When the thread count is 1, the engine processes one-by-one plugin sequentially.</description>
        <description>When the thread count is > 1, the engine distributes plugin processing across the requested number of threads.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>threads</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_peaks</name>
        <description>Returns max peak values for all channels from the most recent frame sent to the audio driver.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>float*</type>
            <name>peaks</name>
          </argument>
          <argument>
            <type>int</type>
            <name>peakcount</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_waveimporter_count</name>
        <description>Returns the number of registrered wave importers.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_waveimporter_format_ext_count</name>
        <description>Returns the number of supported file extensions on a wave importer.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_waveimporter_format_ext</name>
        <description>Returns a supported file extension.</description>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
          <argument>
            <type>int</type>
            <name>extindex</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_waveimporter_format_is_container</name>
        <description>Returns true if the importers get_instrument_count() can return more than 1.</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_create_waveimporter</name>
        <description>Creates a waveimporter instance.</description>
        <returns>zzub_wave_importer_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_create_waveimporter_by_file</name>
        <description>Convenience function for creating a waveimporter from a filename.</description>
        <returns>zzub_wave_importer_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>filename</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_create_plugin_group</name>
        <description>Creates a new plugin group.</description>
        <returns>zzub_plugin_group_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>parent</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_plugin_group_by_id</name>
        <description>Returns a plugin group based on its identifier.</description>
        <returns>zzub_plugin_group_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>int</type>
            <name>id</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_player_get_plugin_group_iterator</name>
        <description>Returns an iterator object for enumerating all plugin groups contained inside a plugin group. Use parent = NULL for the root.</description>
        <returns>zzub_plugin_group_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_player_t*</type>
            <name>player</name>
          </argument>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>parent</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_plugin_group_t</name>
      <method>
        <name>zzub_plugin_group_destroy</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_get_id</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_get_name</name>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_set_name</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>name</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_get_parent</name>
        <returns>zzub_plugin_group_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_set_parent</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>newparent</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_get_position_x</name>
        <returns>float</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_get_position_y</name>
        <returns>float</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_set_position</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
          <argument>
            <type>float</type>
            <name>x</name>
          </argument>
          <argument>
            <type>float</type>
            <name>y</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_get_plugins</name>
        <returns>zzub_plugin_iterator_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_t*</type>
            <name>plugin_group</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_plugin_group_iterator_t</name>
      <description>Helper iterator for a range of groups.</description>
      <method>
        <name>zzub_plugin_group_iterator_next</name>
        <description>Iterates to the next item.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_iterator_t*</type>
            <name>plugin_group_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_iterator_valid</name>
        <description>Returns true if the iterator is valid and it is safe to call current()</description>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_iterator_t*</type>
            <name>plugin_group_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_iterator_current</name>
        <description>Returns the current item.</description>
        <returns>zzub_plugin_group_t*</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_iterator_t*</type>
            <name>plugin_group_iterator</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_plugin_group_iterator_destroy</name>
        <description>Destroys the iterator.</description>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_plugin_group_iterator_t*</type>
            <name>plugin_group_iterator</name>
          </argument>
        </arguments>
      </method>
    </class>
    <class>
      <name>zzub_wave_importer_t</name>
      <method>
        <name>zzub_wave_importer_open</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_importer_t*</type>
            <name>wave_importer</name>
          </argument>
          <argument>
            <type>const char*</type>
            <name>filename</name>
          </argument>
          <argument>
            <type>zzub_input_t*</type>
            <name>strm</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_importer_destroy</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wave_importer_t*</type>
            <name>wave_importer</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_importer_get_instrument_count</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_importer_t*</type>
            <name>wave_importer</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_importer_get_instrument_name</name>
        <returns>const char*</returns>
        <arguments>
          <argument>
            <type>zzub_wave_importer_t*</type>
            <name>wave_importer</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_importer_get_instrument_sample_count</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_importer_t*</type>
            <name>wave_importer</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_importer_get_instrument_sample_info</name>
        <returns>void</returns>
        <arguments>
          <argument>
            <type>zzub_wave_importer_t*</type>
            <name>wave_importer</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
          <argument>
            <type>int</type>
            <name>sample</name>
          </argument>
          <argument>
            <type>char*</type>
            <name>name</name>
          </argument>
          <argument>
            <type>int</type>
            <name>namelen</name>
          </argument>
          <argument>
            <type>int</type>
            <name>samplecount</name>
          </argument>
          <argument>
            <type>int</type>
            <name>channels</name>
          </argument>
          <argument>
            <type>int</type>
            <name>format</name>
          </argument>
          <argument>
            <type>int</type>
            <name>samplerate</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_importer_load_instrument</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_importer_t*</type>
            <name>wave_importer</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
          <argument>
            <type>zzub_wave_t*</type>
            <name>dest</name>
          </argument>
        </arguments>
      </method>
      <method>
        <name>zzub_wave_importer_load_instrument_sample</name>
        <returns>int</returns>
        <arguments>
          <argument>
            <type>zzub_wave_importer_t*</type>
            <name>wave_importer</name>
          </argument>
          <argument>
            <type>int</type>
            <name>index</name>
          </argument>
          <argument>
            <type>int</type>
            <name>sample</name>
          </argument>
          <argument>
            <type>zzub_wavelevel_t*</type>
            <name>dest</name>
          </argument>
        </arguments>
      </method>
    </class>
  </namespace>
</zidl>
