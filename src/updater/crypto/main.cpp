#include <windows.h>
#include <wincrypt.h>
#include <vector>
#include <iomanip>
#include <iostream>
#include <string>
#include <sstream>
#include "crypto.h"

using std::cout;
using std::endl;

// the publickey and privatekey arrays were generated by generate_and_print_keys().
// only need to be created once - regenerate if the private key is compromised.
// the private key must be kept strictly private and not published in the repo or anything like that
// the public key is kept in publickey.cpp for reuse in other apps
unsigned char privatekey[] = {

	// TODO: insert private key

};

bool print_file_signature(std::ostream& strm, const std::string& filename) {
	HCRYPTPROV hProv;

	BOOL bResult = CryptAcquireContext(&hProv, NULL, MS_DEF_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
	if (!bResult) return false;

	HCRYPTKEY hPrivateKey;
	bResult = CryptImportKey(hProv, privatekey, sizeof(privatekey), 0, 0, &hPrivateKey);
	if (!bResult) {
		CryptReleaseContext(hProv, 0);
		return false;
	}

	HCRYPTHASH hFileHash = create_hash_from_file(hProv, filename.c_str());
	if (!hFileHash) {
		CryptDestroyKey(hPrivateKey);
		CryptReleaseContext(hProv, 0);
		return false;
	}

	DWORD dwSignatureLength;
	bResult = CryptSignHash(hFileHash, AT_SIGNATURE, "", 0, 0, &dwSignatureLength);
	if (!bResult)  {
		CryptDestroyHash(hFileHash);
		CryptDestroyKey(hPrivateKey);
		CryptReleaseContext(hProv, 0);
		return false;
	}

	std::vector<unsigned char> signature(dwSignatureLength);
	bResult = CryptSignHash(hFileHash, AT_SIGNATURE, "", 0, &signature.front(), &dwSignatureLength);
	if (!bResult)  {
		CryptDestroyHash(hFileHash);
		CryptDestroyKey(hPrivateKey);
		CryptReleaseContext(hProv, 0);
		return false;
	}

	print_hexstream(strm, signature);

	CryptDestroyHash(hFileHash);
	CryptDestroyKey(hPrivateKey);
	CryptReleaseContext(hProv, 0);
	return true;
}

int main(int argc, char** argv) {
	if (argc != 2) {
		cout << "usage: crypto.exe filename" << endl << endl;
		cout << 
"Prints the signed hash of the specified filename using the private key" << endl <<
"included in the executable. This executable MUST NOT get out of hands!" << endl;
		return 1;
	}
	print_file_signature(cout, argv[1]);
	return 0;
}
